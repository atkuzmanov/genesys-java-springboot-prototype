

{"app":"GeneSys","id":"b689b777-0e7e-43f8-89b7-770e7e33f80a","@timestamp":"2020-10-31T12:22:09.146Z","@version":"1","logger":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","level":"INFO","thread":"http-nio-8080-exec-2","message":"Initializing Spring DispatcherServlet 'dispatcherServlet'","method":"log","class":"org.apache.juli.logging.DirectJDKLog"}




{"app":"GeneSys","id":"d70daeb0-b239-4dde-8dae-b0b2399ddecb","@timestamp":"2020-10-31T12:22:09.244Z","@version":"1","logger":"com.atkuzmanov.genesys.aop.RestLoggingAspect","level":"INFO","thread":"http-nio-8080-exec-2","traceId":"41dfb97d641fc826","spanId":"41dfb97d641fc826","spanExportable":"true","X-Span-Export":"true","X-B3-SpanId":"41dfb97d641fc826","X-B3-TraceId":"41dfb97d641fc826","requestScheme":"http","requestMethod":"POST","request Locales":"[en_GB]","request LocalName":"localhost","request Locale":"en_GB","uri":"/addTimestamp","url":"http://localhost:8080/addTimestamp","request QueryString":"newTimestamp=-1","path":"/addTimestamp","request RemoteHost ":"0:0:0:0:0:0:0:1","request ServerName ":"localhost","request Protocol":"HTTP/1.1","originClass":"class com.atkuzmanov.genesys.controllers.DefaultController","request ServerPort ":"8080","originMethod":"addTimestampToDB","queryParameters":{"newTimestamp":"-1"},"requestBody":"postReqBody\n","headers":{"content-length":"11","postman-token":"66923aaa-aa08-4268-8e3d-7a7e36212d16","host":"localhost:8080","content-type":"text/plain","connection":"keep-alive","cache-control":"no-cache","accept-encoding":"gzip, deflate, br","user-agent":"PostmanRuntime/7.23.0","accept":"*/*"},"message":"INCOMING_REQUEST","method":"logRequest","class":"com.atkuzmanov.genesys.aop.RestLoggingAspect"}
{"app":"GeneSys","id":"cf69ca97-7656-4cb9-a9ca-9776562cb93e","@timestamp":"2020-10-31T12:22:09.257Z","@version":"1","logger":"com.atkuzmanov.genesys.aop.RestLoggingAspect","level":"ERROR","thread":"http-nio-8080-exec-2","traceId":"41dfb97d641fc826","spanId":"41dfb97d641fc826","spanExportable":"true","X-Span-Export":"true","X-B3-SpanId":"41dfb97d641fc826","X-B3-TraceId":"41dfb97d641fc826","originMethod":"addTimestampToDB","originClass":"class com.atkuzmanov.genesys.controllers.DefaultController","message":"Exception: class com.atkuzmanov.genesys.controllers.DefaultController.addTimestampToDB: Exception message: Timestamp id must be a positive integer.Exception cause: null","method":"logAfterThrowing","class":"com.atkuzmanov.genesys.aop.RestLoggingAspect"}
{"app":"GeneSys","id":"9066080e-701c-441c-a608-0e701c641c64","@timestamp":"2020-10-31T12:22:09.273Z","@version":"1","logger":"com.atkuzmanov.genesys.aop.RestLoggingAspect","level":"INFO","thread":"http-nio-8080-exec-2","traceId":"41dfb97d641fc826","spanId":"41dfb97d641fc826","spanExportable":"true","X-Span-Export":"true","X-B3-SpanId":"41dfb97d641fc826","X-B3-TraceId":"41dfb97d641fc826","responseBody":"java.lang.Exception: java.security.InvalidParameterException: Timestamp id must be a positive integer.","originClass":"class com.atkuzmanov.genesys.RestResponseEntityExceptionHandler","originMethod":"handleMiscFailures","status":"400","headers":{},"message":"OUTGOING_RESPONSE","method":"logResponse","class":"com.atkuzmanov.genesys.aop.RestLoggingAspect"}



MDC >>> traceId : f0609b781c9c172c
MDC >>> spanId : f0609b781c9c172c
MDC >>> spanExportable : true
MDC >>> X-Span-Export : true
MDC >>> X-B3-SpanId : f0609b781c9c172c
MDC >>> X-B3-TraceId : f0609b781c9c172c


//        System.out.println(">>> X-B3-TraceId: " + MDC.get("X-B3-TraceId"));

        for (String key :MDC.getCopyOfContextMap().keySet()) {
            System.out.println("MDC >>> " + key + " : " + MDC.get(key));
        }


----


{"app":"GeneSys","id":"49e2e5c2-3dff-4fc1-a2e5-c23dff5fc1d6","@timestamp":"2020-11-01T10:08:30.742Z","@version":"1","logger":"com.atkuzmanov.genesys.aop.RestLoggingAspect","level":"INFO","thread":"http-nio-8080-exec-2","traceId":"dd57457f48dd870c","spanId":"dd57457f48dd870c","spanExportable":"true","X-Span-Export":"true","X-B3-SpanId":"dd57457f48dd870c","X-B3-TraceId":"dd57457f48dd870c","requestScheme":"http","requestMethod":"POST","request Locales":"[en_GB]","request LocalName":"localhost","request Locale":"en_GB","uri":"/addTimestamp","url":"http://localhost:8080/addTimestamp","request QueryString":"newTimestamp=-1","path":"/addTimestamp","request RemoteHost ":"0:0:0:0:0:0:0:1","request ServerName ":"localhost","request Protocol":"HTTP/1.1","originClass":"class com.atkuzmanov.genesys.controllers.DefaultController","request ServerPort ":"8080","originMethod":"addTimestampToDB","queryParameters":{"newTimestamp":"-1"},"requestBody":"postReqBody\n","headers":{"content-length":"11","postman-token":"b1544593-f257-4544-948b-70dd0d78581b","host":"localhost:8080","content-type":"text/plain","connection":"keep-alive","cache-control":"no-cache","accept-encoding":"gzip, deflate, br","user-agent":"PostmanRuntime/7.23.0","accept":"*/*"},"message":"INCOMING_REQUEST","method":"logRequest","class":"com.atkuzmanov.genesys.aop.RestLoggingAspect"}
{"app":"GeneSys","id":"6422838b-4dc5-4425-a283-8b4dc58425ff","@timestamp":"2020-11-01T10:08:30.761Z","@version":"1","logger":"com.atkuzmanov.genesys.aop.RestLoggingAspect","level":"ERROR","thread":"http-nio-8080-exec-2","traceId":"dd57457f48dd870c","spanId":"dd57457f48dd870c","spanExportable":"true","X-Span-Export":"true","X-B3-SpanId":"dd57457f48dd870c","X-B3-TraceId":"dd57457f48dd870c","originMethod":"addTimestampToDB","originClass":"class com.atkuzmanov.genesys.controllers.DefaultController","message":"Exception: class com.atkuzmanov.genesys.controllers.DefaultController.addTimestampToDB: Exception message: Timestamp id must be a positive integer.Exception cause: null","method":"logAfterThrowing","class":"com.atkuzmanov.genesys.aop.RestLoggingAspect"}
{"app":"GeneSys","id":"c0cbe5b1-c757-4816-8be5-b1c7573816e3","@timestamp":"2020-11-01T10:08:30.779Z","@version":"1","logger":"com.atkuzmanov.genesys.aop.RestLoggingAspect","level":"INFO","thread":"http-nio-8080-exec-2","traceId":"dd57457f48dd870c","spanId":"dd57457f48dd870c","spanExportable":"true","X-Span-Export":"true","X-B3-SpanId":"dd57457f48dd870c","X-B3-TraceId":"dd57457f48dd870c","status":400,"originMethod":"handleMiscFailures","originClass":"class com.atkuzmanov.genesys.RestResponseEntityExceptionHandler","responseBody":"com.atkuzmanov.genesys.ResponseDetails@1dd34e74","message":"OUTGOING_RESPONSE","path":null,"headers":null,"httpHeaders":{},"throwable":null,"message":"OUTGOING_RESPONSE","method":"logResponse","class":"com.atkuzmanov.genesys.aop.RestLoggingAspect"}



---

    @AfterReturning(pointcut = "execution(* com.atkuzmanov.genesys..*.*(..))", returning = "result")
    public void logResponse(JoinPoint joinPoint, Object result) {
        if(result instanceof ResponseEntity) {
            Class<?> targetClass = joinPoint.getTarget().getClass();
            ResponseEntity<?> responseObj = (ResponseEntity<?>) result;

//            Map<String, String> responseLogMap = new HashMap<>();
//            responseLogMap.put("status", String.valueOf(responseObj.getStatusCodeValue()));
//            responseLogMap.put("originMethod", joinPoint.getSignature().getName());
//            responseLogMap.put("originClass", targetClass.toString());
//            if (responseObj.hasBody()) {
//                responseLogMap.put("responseBody", responseObj.getBody().toString());
//            }
//
//            log.info("OUTGOING_RESPONSE",
//                    entries(responseLogMap),
//                    kv("headers", extractResponseHeaders(responseObj)));

            ResponseDetailsBuilder rdb = ResponseDetails.builder()
                    .message("OUTGOING_RESPONSE")
                    .status(responseObj.getStatusCodeValue())
                    .originClass(targetClass.toString())
                    .originMethod(joinPoint.getSignature().getName())
                    .headers(responseObj.getHeaders());
            if (responseObj.hasBody()) {
//                String body = Objects.requireNonNull(responseObj.getBody()).toString();
//                rdb.responseBody(body);
                rdb.responseBody(Objects.requireNonNull(responseObj.getBody()).toString());

                if (responseObj.getBody() instanceof ResponseDetails) {
                    ResponseDetails responseDetails = (ResponseDetails) responseObj.getBody();
                    rdb.responseBody(responseDetails.getResponseBody());
//                    rdb.headers(responseDetails.getHeaders());
                }
            }


            ResponseDetails rd = rdb.build();
            log.info(rd.getMessage(), fields(rd));

        }
    }

    private Map<String, String> extractResponseHeaders(ResponseEntity<?> response) {
        Map<String, String> headers = new HashMap<>();
        response.getHeaders().forEach((key, value) -> headers.put(key, Arrays.toString(value.toArray())));
        return headers;
    }

----



